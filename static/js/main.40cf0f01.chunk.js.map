{"version":3,"sources":["Store/Actions/setGifList.js","Store/Actions/setSearchTerm.js","Store/Actions/setFakeApiSearchTerm.js","Store/Thunk/getTrendingList.js","Store/Actions/setSnackBar.js","Store/Thunk/getGifListCustom.js","Store/Thunk/postFakeApiSearchTerm.js","Components/SearchBar/SearchBar.js","Components/SnackBar/SnackBar.js","Pages/HomePage/HomePage.js","Store/Thunk/updateFakeApiSearchTerm.js","Components/NavBar/NavBar.js","Components/CategoryList/CategoryList.js","App.js","Store/Reducers/searchTerm.js","Store/Reducers/gifList.js","Store/Reducers/fakeApiSearchTerm.js","Store/Reducers/snackBar.js","Store/Reducers/index.js","index.js"],"names":["setGifList","gifList","type","setGifListLoading","isLoading","setGifListName","gifListName","setSearchTerm","searchTerm","setFakeApiSearchTerm","term","date","getTrendingList","dispatch","axios","get","params","api_key","rating","limit","then","res","data","length","catch","err","console","log","setSnackBarOpen","open","getGifListCustom","getState","q","post","createdAt","useStyles","makeStyles","search","backgroundColor","padding","borderRadius","SearchBar","useSelector","state","useDispatch","classes","Box","mb","display","alignItems","justifyContent","className","InputBase","fullWidth","value","style","color","placeholder","onChange","e","target","onKeyDown","keyCode","IconButton","onClick","Search","SnackBarAlert","snackBarData","snackBar","gifLink","useEffect","copyCodeToClipboard","navigator","clipboard","writeText","handleClose","Snackbar","autoHideDuration","onClose","elevation","variant","severity","root","gridTile","height","tileBar","position","width","background","tileBarText","fontFamily","textTransform","HomePage","reduxStore","loading","hdQuality","fakeApiSearchTerm","searchedDate","useState","loadingImageList","setLoadingImageList","matchesWidth","useMediaQuery","useTheme","breakpoints","up","ErrorMessage","text","Typography","CircularProgress","size","m","marginBottom","Grid","container","spacing","wrap","item","Switch","checked","map","index","key","id","xs","sm","md","lg","url","setSnackBarLink","includes","cursor","onLoad","concat","src","images","original","fixed_height_downsampled","objectFit","alt","title","align","mt","moment","format","Button","patch","updatedAt","SnackBar","theme","logo","letterSpacing","marginRight","NavBar","openCloseMenu","matchesSize","trigger","useScrollTrigger","searchTrending","Slide","appear","direction","in","AppBar","Toolbar","Hidden","mdUp","mr","Menu","fontSize","ml","flexWrap","margin","ListItemStyled","withStyles","ListItem","CategoryList","list","selectedId","imageLoadArray","setData","categoryList","List","name","selected","button","ListItemIcon","Avatar","gif","fixed_height_small","ListItemText","minHeight","overflowY","overflow","boxShadow","webkitBoxShadow","outline","App","isOpen","setIsOpen","mountOnEnter","unmountOnExit","initialState","appReducer","combineReducers","action","createMuiTheme","typography","store","createStore","undefined","applyMiddleware","Thunk","ReactDOM","render","responsiveFontSizes","document","getElementById"],"mappings":"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","file":"static/js/main.40cf0f01.chunk.js","sourcesContent":["export const setGifList = gifList => ({\r\n  type: \"setGifList\",\r\n  gifList\r\n});\r\n\r\nexport const setGifListLoading = isLoading => ({\r\n  type: \"setGifListLoading\",\r\n  isLoading\r\n});\r\n\r\nexport const setGifListName = gifListName => ({\r\n  type: \"setGifListName\",\r\n  gifListName\r\n});\r\n\r\nexport const setHdQuality = hdQuality => ({\r\n  type: \"setHdQuality\",\r\n  hdQuality\r\n});\r\n","export const setSearchTerm = searchTerm => ({\r\n  type: \"setSearchTerm\",\r\n  searchTerm\r\n});","export const setFakeApiSearchTerm = (term = \"\", date = \"\") => ({\r\n    type: \"setFakeApiSearchTerm\",\r\n    term,\r\n    date,\r\n});\r\n","import axios from \"axios\";\r\nimport { setGifListLoading, setGifList, setGifListName } from \"../Actions/setGifList\";\r\nimport { setSearchTerm } from \"../Actions/setSearchTerm\";\r\nimport { setFakeApiSearchTerm } from \"../Actions/setFakeApiSearchTerm\";\r\n\r\nexport const getTrendingList = () => (dispatch) => {\r\n    dispatch(setGifListLoading(true));\r\n    axios\r\n        .get(\"https://api.giphy.com/v1/gifs/trending\", {\r\n            params: {\r\n                api_key: \"WYuuWO9uW1KJpPALeDKJM0NdJkjnccax\",\r\n                rating: \"g\",\r\n                limit: \"25\",\r\n            },\r\n        })\r\n        .then((res) => {\r\n            if (res.data.data.length > 0) {\r\n                dispatch(setGifList(res.data.data));\r\n            } else dispatch(setGifList(\"No data\"));\r\n            dispatch(setGifListLoading(false));\r\n            dispatch(setGifListName(\"Trending GIFs\"));\r\n            dispatch(setSearchTerm(\"\"));\r\n            dispatch(setFakeApiSearchTerm());\r\n        })\r\n        .catch((err) => {\r\n            dispatch(setGifListLoading(false));\r\n            dispatch(setGifList(\"Error\"));\r\n            console.log(err);\r\n        });\r\n};\r\n","export const setSnackBarOpen = (open = false) => ({\r\n    type: \"SET_SNACKBAR_OPEN\",\r\n    open,\r\n});\r\n\r\nexport const setSnackBarLink = (gifLink = \"\") => ({\r\n    type: \"SET_SNACKBAR_LINK\",\r\n    gifLink,\r\n});\r\n","import axios from \"axios\";\r\nimport { setGifList, setGifListLoading, setGifListName } from \"../Actions/setGifList\";\r\nimport { postFakeApiSearchTerm } from \"./postFakeApiSearchTerm\";\r\n\r\nexport const getGifListCustom = () => (dispatch, getState) => {\r\n    dispatch(setGifListLoading(true));\r\n    const term = getState().searchTerm.searchTerm;\r\n    axios\r\n        .get(\"https://api.giphy.com/v1/gifs/search\", {\r\n            params: {\r\n                api_key: \"WYuuWO9uW1KJpPALeDKJM0NdJkjnccax\",\r\n                q: term,\r\n                rating: \"g\",\r\n                limit: \"25\",\r\n            },\r\n        })\r\n        .then((res) => {\r\n            if (res.data.data.length > 0) {\r\n                dispatch(setGifList(res.data.data));\r\n            } else dispatch(setGifList(\"No data\"));\r\n            dispatch(setGifListLoading(false));\r\n            dispatch(setGifListName(term));\r\n            dispatch(postFakeApiSearchTerm());\r\n        })\r\n        .catch((err) => {\r\n            dispatch(setGifListLoading(false));\r\n            dispatch(setGifList(\"Error\"));\r\n            console.log(err);\r\n        });\r\n};\r\n","import axios from \"axios\";\r\nimport { setFakeApiSearchTerm } from \"../Actions/setFakeApiSearchTerm\";\r\n\r\nexport const postFakeApiSearchTerm = () => (dispatch, getState) => {\r\n    const term = getState().searchTerm.searchTerm;\r\n    axios\r\n        .post(\"https://reqres.in/api/users\", {\r\n            term: term,\r\n        })\r\n        .then((res) => {\r\n            dispatch(setFakeApiSearchTerm(res.data.term, res.data.createdAt));\r\n        })\r\n        .catch((err) => console.log(err));\r\n};\r\n","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { InputBase, IconButton, Box, makeStyles } from \"@material-ui/core\";\r\nimport { Search } from \"@material-ui/icons\";\r\nimport { getGifListCustom } from \"../../Store/Thunk/getGifListCustom\";\r\nimport { setSearchTerm } from \"../../Store/Actions/setSearchTerm\";\r\n\r\nconst useStyles = makeStyles({\r\n    search: {\r\n        backgroundColor: \"#8a0b31\",\r\n        padding: \"0 10px\",\r\n        borderRadius: \"5px\",\r\n    },\r\n});\r\n\r\nconst SearchBar = () => {\r\n    const searchTerm = useSelector((state) => state.searchTerm.searchTerm);\r\n    const dispatch = useDispatch();\r\n    const classes = useStyles();\r\n\r\n    const handleChange = (e) => {\r\n        dispatch(setSearchTerm(e.target.value));\r\n    };\r\n\r\n    const search = () => {\r\n        dispatch(getGifListCustom());\r\n    };\r\n\r\n    return (\r\n        <Box mb='20px' display='flex' alignItems='center' justifyContent='space-between' className={classes.search}>\r\n            <InputBase\r\n                fullWidth\r\n                value={searchTerm}\r\n                style={{ color: \"white\" }}\r\n                placeholder='Search for GIF'\r\n                onChange={handleChange}\r\n                onKeyDown={(e) => (e.keyCode === 13 ? search() : null)}\r\n            />\r\n            <IconButton onClick={search}>\r\n                <Search />\r\n            </IconButton>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default SearchBar;\r\n","import React, { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Snackbar } from \"@material-ui/core\";\r\nimport { setSnackBarOpen } from \"../../Store/Actions/setSnackBar\";\r\nimport MuiAlert from \"@material-ui/lab/Alert\";\r\n\r\nconst SnackBarAlert = () => {\r\n    const snackBarData = useSelector((state) => ({\r\n        open: state.snackBar.open,\r\n        gifLink: state.snackBar.gifLink,\r\n    }));\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        copyCodeToClipboard();\r\n        // eslint-disable-next-line\r\n    }, [snackBarData]);\r\n\r\n    const copyCodeToClipboard = () => {\r\n        navigator.clipboard.writeText(snackBarData.gifLink);\r\n    };\r\n\r\n    const handleClose = () => dispatch(setSnackBarOpen());\r\n    return (\r\n        <Snackbar open={snackBarData.open} autoHideDuration={3000} onClose={handleClose}>\r\n            <MuiAlert elevation={6} variant='filled' onClose={handleClose} severity='success'>\r\n                Copied to clipboard!\r\n            </MuiAlert>\r\n        </Snackbar>\r\n    );\r\n};\r\n\r\nexport default SnackBarAlert;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { makeStyles, Box, Grid, Switch, CircularProgress, Typography, useMediaQuery, useTheme, Button } from \"@material-ui/core\";\r\nimport { getTrendingList } from \"../../Store/Thunk/getTrendingList\";\r\nimport { setHdQuality } from \"../../Store/Actions/setGifList\";\r\nimport { updateFakeApiSearchTerm } from \"../../Store/Thunk/updateFakeApiSearchTerm\";\r\nimport { setSnackBarOpen } from \"../../Store/Actions/setSnackBar\";\r\nimport { setSnackBarLink } from \"../../Store/Actions/setSnackBar\";\r\nimport SearchBar from \"../../Components/SearchBar/SearchBar\";\r\nimport SnackBar from \"../../Components/SnackBar/SnackBar\";\r\nimport moment from \"moment\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        backgroundColor: \"red\",\r\n    },\r\n    gridTile: {\r\n        height: \"300px\",\r\n    },\r\n    tileBar: {\r\n        position: \"absolute\",\r\n        width: \"100%\",\r\n        height: \"25%\",\r\n        background: \"linear-gradient(to bottom, rgba(0,0,0,0.7) 0%, rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)\",\r\n    },\r\n    tileBarText: {\r\n        fontFamily: '\"Anton\", sans-serif',\r\n        color: \"#b3b3b3\",\r\n        textTransform: \"capitalize\",\r\n    },\r\n});\r\nconst HomePage = () => {\r\n    const classes = useStyles();\r\n    const reduxStore = useSelector((state) => ({\r\n        gifList: state.gifList.gifList,\r\n        gifListName: state.gifList.gifListName,\r\n        loading: state.gifList.isLoading,\r\n        hdQuality: state.gifList.hdQuality,\r\n        fakeApiSearchTerm: {\r\n            term: state.fakeApiSearchTerm.term,\r\n            date: state.fakeApiSearchTerm.searchedDate,\r\n        },\r\n    }));\r\n    const dispatch = useDispatch();\r\n    const [loadingImageList, setLoadingImageList] = useState([]);\r\n    const matchesWidth = useMediaQuery(useTheme().breakpoints.up(\"sm\"));\r\n\r\n    useEffect(() => {\r\n        dispatch(getTrendingList());\r\n    }, [dispatch]);\r\n\r\n    const loadedImage = (id) => {\r\n        setLoadingImageList(loadingImageList.concat(id));\r\n    };\r\n\r\n    const ErrorMessage = ({ text }) => {\r\n        return (\r\n            <Box height='90vh' width='100%' display='flex' justifyContent='center' alignItems='center' style={{ color: \"white\" }}>\r\n                <Typography variant='h4'>{text}</Typography>\r\n            </Box>\r\n        );\r\n    };\r\n\r\n    const changeQuality = () => {\r\n        setLoadingImageList([]);\r\n        dispatch(setHdQuality(!reduxStore.hdQuality));\r\n    };\r\n\r\n    const setSnackBarData = (gifLink) => {\r\n        dispatch(setSnackBarOpen(true));\r\n        dispatch(setSnackBarLink(gifLink));\r\n    };\r\n\r\n    if (reduxStore.loading)\r\n        return (\r\n            <Box height='90vh' width='100%' display='flex' justifyContent='center' alignItems='center'>\r\n                <CircularProgress size={80} />\r\n            </Box>\r\n        );\r\n\r\n    if (reduxStore.gifList === \"Error\") {\r\n        return <ErrorMessage text='Error occured...' />;\r\n    }\r\n\r\n    if (reduxStore.gifList === \"No data\") {\r\n        return <ErrorMessage text='No data found' />;\r\n    }\r\n\r\n    return (\r\n        <Box width='90%' m='50px auto' style={{ color: \"white\" }}>\r\n            <SearchBar />\r\n            <Box display={matchesWidth ? \"flex\" : null} justifyContent='space-between' alignItems='center' width='100%'>\r\n                <Typography\r\n                    variant='h4'\r\n                    style={{\r\n                        fontFamily: '\"Righteous\", cursive',\r\n                        color: \"white\",\r\n                        marginBottom: \"10px\",\r\n                        textTransform: \"capitalize\",\r\n                    }}>\r\n                    {reduxStore.gifListName}\r\n                </Typography>\r\n                <Box>\r\n                    <Grid container alignItems='center' spacing={0} wrap='wrap'>\r\n                        <Grid item>Standart</Grid>\r\n                        <Grid item>\r\n                            <Switch checked={reduxStore.hdQuality} onChange={changeQuality} />\r\n                        </Grid>\r\n                        <Grid item>HD</Grid>\r\n                    </Grid>\r\n                </Box>\r\n            </Box>\r\n\r\n            <Grid container spacing={1} wrap='wrap'>\r\n                {reduxStore.gifList.map((item, index) => {\r\n                    return (\r\n                        <Grid\r\n                            key={item.id}\r\n                            item\r\n                            xs={12}\r\n                            sm={6}\r\n                            md={index % 3 === 0 ? 6 : 3}\r\n                            lg={index % 3 === 0 ? 4 : 2}\r\n                            className={classes.gridTile}\r\n                            onClick={() => {\r\n                                setSnackBarData(item.url);\r\n                            }}>\r\n                            <Box\r\n                                // style={{  }}\r\n                                height='100%'\r\n                                width='100%'\r\n                                style={\r\n                                    loadingImageList.includes(item.id)\r\n                                        ? { position: \"relative\", cursor: \"pointer\" }\r\n                                        : { display: \"none\" }\r\n                                }>\r\n                                <img\r\n                                    height='100%'\r\n                                    width='100%'\r\n                                    onLoad={() => loadedImage(item.id)}\r\n                                    src={\r\n                                        reduxStore.hdQuality ? item.images.original.url : item.images.fixed_height_downsampled.url\r\n                                    }\r\n                                    style={{ objectFit: \"cover\", position: \"absolute\" }}\r\n                                    alt={item.title}\r\n                                />\r\n                                <Box className={classes.tileBar}>\r\n                                    <Typography className={classes.tileBarText} align='center' variant='h6'>\r\n                                        {item.title}\r\n                                    </Typography>\r\n                                </Box>\r\n                            </Box>\r\n\r\n                            {loadingImageList.includes(item.id) ? null : (\r\n                                <Box\r\n                                    height='100%'\r\n                                    width='100%'\r\n                                    display='flex'\r\n                                    justifyContent='center'\r\n                                    alignItems='center'\r\n                                    style={{ backgroundColor: \"#212121\" }}>\r\n                                    <CircularProgress />\r\n                                </Box>\r\n                            )}\r\n                        </Grid>\r\n                    );\r\n                })}\r\n            </Grid>\r\n            <Box mt='50px'>\r\n                {reduxStore.fakeApiSearchTerm.term.length === 0 ? null : (\r\n                    <Box>\r\n                        <Typography variant='body2'>Details:</Typography>\r\n                        <Typography variant='body2'>Searched word: {reduxStore.fakeApiSearchTerm.term}</Typography>\r\n                        <Typography variant='body2'>\r\n                            Date: {moment(reduxStore.fakeApiSearchTerm.date).format(\"YYYY/MM/DD/HH:mm:ss\")}\r\n                        </Typography>\r\n                        <Button onClick={() => dispatch(updateFakeApiSearchTerm())} style={{ color: \"white\" }}>\r\n                            Update\r\n                        </Button>\r\n                    </Box>\r\n                )}\r\n            </Box>\r\n            <SnackBar />\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default HomePage;\r\n","import axios from \"axios\";\r\nimport { setFakeApiSearchTerm } from \"../Actions/setFakeApiSearchTerm\";\r\n\r\nexport const updateFakeApiSearchTerm = () => (dispatch, getState) => {\r\n    const term = getState().searchTerm.searchTerm;\r\n    axios\r\n        .patch(\"https://reqres.in/api/users\", {\r\n            term: term,\r\n        })\r\n        .then((res) => {\r\n            dispatch(setFakeApiSearchTerm(res.data.term, res.data.updatedAt));\r\n        })\r\n        .catch((err) => console.log(err));\r\n};\r\n","import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport {\r\n    AppBar,\r\n    Toolbar,\r\n    Typography,\r\n    Box,\r\n    Hidden,\r\n    IconButton,\r\n    Slide,\r\n    Button,\r\n    makeStyles,\r\n    useTheme,\r\n    useMediaQuery,\r\n    useScrollTrigger,\r\n} from \"@material-ui/core\";\r\nimport { Menu } from \"@material-ui/icons\";\r\n\r\nimport { getTrendingList } from \"../../Store/Thunk/getTrendingList\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        color: \"white\",\r\n        backgroundColor: \"#121212\",\r\n    },\r\n    logo: {\r\n        fontFamily: '\"Righteous\", cursive',\r\n        letterSpacing: \"2px\",\r\n        cursor: \"pointer\",\r\n        marginRight: \"30px\",\r\n    },\r\n}));\r\n\r\nconst NavBar = ({ openCloseMenu }) => {\r\n    const classes = useStyles();\r\n    const matchesSize = useMediaQuery(useTheme().breakpoints.up(\"md\"));\r\n    const trigger = useScrollTrigger();\r\n    const dispatch = useDispatch();\r\n\r\n    const searchTrending = () => {\r\n        dispatch(getTrendingList());\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Slide appear={false} direction='down' in={!trigger}>\r\n                <AppBar className={classes.root}>\r\n                    <Box width={matchesSize ? \"80%\" : \"100%\"} m='auto'>\r\n                        <Toolbar>\r\n                            <Hidden mdUp>\r\n                                <Box mr='10px'>\r\n                                    <IconButton size='small' onClick={openCloseMenu}>\r\n                                        <Menu fontSize='large' style={{ color: \"white\" }} />\r\n                                    </IconButton>\r\n                                </Box>\r\n                            </Hidden>\r\n                            <Typography onClick={searchTrending} className={classes.logo} variant='h3'>\r\n                                GifBF\r\n                            </Typography>\r\n                            <Box ml='auto' display='flex' alignItems='center' justifyContent='flex-end' flexWrap='wrap'>\r\n                                <Box>\r\n                                    <Button onClick={searchTrending} style={{ color: \"inherit\" }}>\r\n                                        <Typography align='center' variant='h6' style={{ margin: \"0 40px\" }}>\r\n                                            Trending GIFs\r\n                                        </Typography>\r\n                                    </Button>\r\n                                </Box>\r\n                            </Box>\r\n                        </Toolbar>\r\n                    </Box>\r\n                </AppBar>\r\n            </Slide>\r\n            <Toolbar />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NavBar;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n    List,\r\n    ListItem,\r\n    ListItemText,\r\n    ListItemIcon,\r\n    CircularProgress,\r\n    Avatar,\r\n    Box,\r\n    Typography,\r\n    withStyles,\r\n} from \"@material-ui/core\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport axios from \"axios\";\r\nimport { setSearchTerm } from \"../../Store/Actions/setSearchTerm\";\r\nimport { getGifListCustom } from \"../../Store/Thunk/getGifListCustom\";\r\n\r\nconst ListItemStyled = withStyles({\r\n    root: {\r\n        fontFamily: '\"Righteous\", cursive',\r\n        textTransform: \"capitalize\",\r\n        color: \"white\",\r\n        \"&.Mui-selected\": {\r\n            backgroundColor: \"rgba(255, 255, 255, 0.5)\",\r\n        },\r\n        \"&.Mui-selected:hover\": {\r\n            backgroundColor: \"rgba(255, 255, 255, 0.6)\",\r\n        },\r\n        \"&:hover\": {\r\n            backgroundColor: \"rgba(255, 255, 255, 0.3)\",\r\n        },\r\n    },\r\n})(ListItem);\r\n\r\nconst CategoryList = () => {\r\n    const [data, setData] = useState({\r\n        list: null,\r\n        loading: true,\r\n        selectedId: null,\r\n        imageLoadArray: [],\r\n    });\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        categoryList();\r\n        // eslint-disable-next-line\r\n    }, []);\r\n\r\n    const categoryList = () => {\r\n        axios\r\n            .get(\"https://api.giphy.com/v1/gifs/categories\", {\r\n                params: {\r\n                    api_key: \"WYuuWO9uW1KJpPALeDKJM0NdJkjnccax\",\r\n                },\r\n            })\r\n            .then((res) => {\r\n                setData({ ...data, list: res.data.data, loading: false });\r\n            })\r\n            .catch((err) => {\r\n                setData({ ...data, list: null, loading: false });\r\n                console.log(err);\r\n            });\r\n    };\r\n\r\n    const select = (id, name) => {\r\n        setData({ ...data, selectedId: id });\r\n        dispatch(setSearchTerm(name));\r\n        dispatch(getGifListCustom());\r\n    };\r\n\r\n    if (data.loading)\r\n        return (\r\n            <Box height='90vh' width='100%' display='flex' justifyContent='center' alignItems='center'>\r\n                <CircularProgress size={60} />\r\n            </Box>\r\n        );\r\n\r\n    if (data.list === null) return <Typography variant='body1'>Error occured...</Typography>;\r\n\r\n    return (\r\n        <List>\r\n            {/* jei reiks name kateforijos tai name_encoded gali but skiriasi biski pasiziurek console loge */}\r\n            {data.list.map((item, index) => {\r\n                return (\r\n                    <ListItemStyled\r\n                        onClick={() => select(index, item.name)}\r\n                        key={index}\r\n                        selected={data.selectedId === index ? true : false}\r\n                        button>\r\n                        <ListItemIcon>\r\n                            <Box>\r\n                                <Avatar\r\n                                    style={data.imageLoadArray.includes(index) ? null : { display: \"none\" }}\r\n                                    onLoad={() =>\r\n                                        setData({\r\n                                            ...data,\r\n                                            imageLoadArray: data.imageLoadArray.concat(index),\r\n                                        })\r\n                                    }\r\n                                    src={item.gif.images.fixed_height_small.url}\r\n                                />\r\n\r\n                                {data.imageLoadArray.includes(index) ? null : <CircularProgress />}\r\n                            </Box>\r\n                        </ListItemIcon>\r\n                        <ListItemText>\r\n                            <Typography>{item.name}</Typography>\r\n                        </ListItemText>\r\n                    </ListItemStyled>\r\n                );\r\n            })}\r\n        </List>\r\n    );\r\n};\r\n\r\nexport default CategoryList;\r\n","import React, { useState } from \"react\";\r\nimport HomePage from \"./Pages/HomePage/HomePage\";\r\nimport NavBar from \"./Components/NavBar/NavBar\";\r\nimport { Grid, makeStyles, Slide, Box, useMediaQuery, useTheme } from \"@material-ui/core\";\r\nimport CategoryList from \"./Components/CategoryList/CategoryList\";\r\n\r\nconst useStyles = makeStyles({\r\n    item: {\r\n        minHeight: \"100vh\",\r\n    },\r\n    categoryList: {\r\n        width: \"200px\",\r\n        overflowY: \"scroll\",\r\n        overflow: \"hidden\",\r\n        height: \"100vh\",\r\n        \"&::-webkit-scrollbar\": {\r\n            width: \"0.4em\",\r\n            backgroundColor: \"#4f4f4f\",\r\n        },\r\n        \"&::-webkit-scrollbar-track\": {\r\n            boxShadow: \"inset 0 0 6px rgba(0,0,0,0.00)\",\r\n            webkitBoxShadow: \"inset 0 0 6px rgba(0,0,0,0.00)\",\r\n        },\r\n        \"&::-webkit-scrollbar-thumb\": {\r\n            outline: \"1px solid slategrey\",\r\n            backgroundColor: \"#381737\",\r\n        },\r\n    },\r\n});\r\nfunction App() {\r\n    const classes = useStyles();\r\n    const matchesSize = useMediaQuery(useTheme().breakpoints.up(\"md\"));\r\n    const [isOpen, setIsOpen] = useState(false);\r\n\r\n    const openCloseMenu = () => {\r\n        setIsOpen(!isOpen);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <NavBar openCloseMenu={openCloseMenu} />\r\n            <Grid className={classes.item} container>\r\n                <Slide direction='right' in={matchesSize || isOpen} mountOnEnter unmountOnExit>\r\n                    <Box style={{ backgroundColor: \"#121212\" }} display={matchesSize || isOpen ? null : \"none\"}>\r\n                        <Grid\r\n                            style={matchesSize || isOpen ? null : { display: \"none\" }}\r\n                            item\r\n                            container\r\n                            alignItems={null}\r\n                            className={classes.categoryList}>\r\n                            <CategoryList />\r\n                        </Grid>\r\n                    </Box>\r\n                </Slide>\r\n                <Grid item xs>\r\n                    <HomePage />\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","const initialState = {\r\n  searchTerm: ''\r\n};\r\n\r\nexport const searchTerm = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"setSearchTerm\":\r\n      return {\r\n        ...state,\r\n        searchTerm: action.searchTerm\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","const initialState = {\r\n  gifList: [],\r\n  gifListName: null,\r\n  isLoading: true,\r\n  hdQuality: false\r\n};\r\n\r\nexport const gifList = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"setGifList\":\r\n      return { ...state, gifList: action.gifList };\r\n    case \"setGifListLoading\":\r\n      return { ...state, isLoading: action.isLoading };\r\n    case \"setGifListName\":\r\n      return { ...state, gifListName: action.gifListName };\r\n    case \"setHdQuality\":\r\n      return { ...state, hdQuality: action.hdQuality };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","const initialState = {\r\n    term: \"\",\r\n    searchedDate: \"\",\r\n};\r\n\r\nexport const fakeApiSearchTerm = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case \"setFakeApiSearchTerm\":\r\n            return {\r\n                ...state,\r\n                term: action.term,\r\n                searchedDate: action.date,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","const initialState = {\r\n    open: false,\r\n    gifLink: \"\",\r\n};\r\n\r\nexport const snackBar = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case \"SET_SNACKBAR_OPEN\":\r\n            return { ...state, open: action.open };\r\n        case \"SET_SNACKBAR_LINK\":\r\n            return { ...state, gifLink: action.gifLink };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { combineReducers } from \"redux\";\r\nimport { searchTerm } from \"./searchTerm\";\r\nimport { gifList } from \"./gifList\";\r\nimport { fakeApiSearchTerm } from \"./fakeApiSearchTerm\";\r\nimport { snackBar } from \"./snackBar\";\r\n\r\nconst appReducer = combineReducers({\r\n    searchTerm,\r\n    gifList,\r\n    fakeApiSearchTerm,\r\n    snackBar,\r\n});\r\n\r\nexport const allReducer = (state, action) => {\r\n    if (action.type === \"RESET_APP\") {\r\n        state = undefined;\r\n    }\r\n    return appReducer(state, action);\r\n};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport {\r\n  MuiThemeProvider,\r\n  createMuiTheme,\r\n  responsiveFontSizes\r\n} from \"@material-ui/core\";\r\nimport { Provider } from \"react-redux\";\r\nimport { createStore } from \"redux\";\r\nimport { allReducer } from \"./Store/Reducers\";\r\nimport Thunk from \"redux-thunk\";\r\nimport { applyMiddleware } from \"redux\";\r\n\r\nconst theme = createMuiTheme({\r\n  typography: {\r\n    fontFamily: '\"Baloo Bhai 2\", cursive'\r\n  }\r\n});\r\n\r\nconst store = createStore(allReducer, applyMiddleware(Thunk));\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <MuiThemeProvider theme={responsiveFontSizes(theme)}>\r\n      <App />\r\n    </MuiThemeProvider>\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}